plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'info.solidsoft.pitest' version '1.19.0-rc.1'
    id 'checkstyle'
}

group = 'com.nisum'
version = '0.0.1-SNAPSHOT'
description = 'Nisum coding challenge'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

apply from: 'dependencies.gradle'

apply from: 'test.gradle'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.12'

    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.2.1'
}

tasks.register('printMainClasses') {
    doLast {
        def dir = file('build/classes/java/main')
        if (!dir.exists()) {
            println "No existe build/classes/java/main. Ejecuta: ./gradlew clean build"
            return
        }
        println "== Clases en build/classes/java/main =="
        fileTree(dir: dir, include: '**/*.class').files.each { f ->
            println f.path
        }
    }
}
tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.18.2'
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = true
}

tasks.named('check') {
    dependsOn 'checkstyleMain', 'checkstyleTest'
}